__author__ = 'Шишкин Анатолий Васильевич'

# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1
# 1 1 2 3 5 8 13

def fibonacci(n, m):
    '''
    функция выводит на печать участок ряда фибоначи с элемента n по элемент m
    '''
    fb = []
    '''
    # через цикл формируем ряд фибоначчи вплоть до элемента m, запрошенного пользователем
    for i in range(m):
        if 0 <= i <= 1:
            fb.append(1)
        else:
            fb.append(fb[i-2] + fb[i-1])
    # делаем возврат из функции запрашиваемого ряда fb
    return print('Запрашиваемый вами участок ряда фибоначи выглядит следующим образом:\n', fb[n:m])

print('--- Задача 1 - уровень normal - начало ---')

# запрашиваем у пользователя начальный и конечный элементы для вывода и радуемся
fibonacci(int(input('Введите начало участка ряда Фибоначчи:\n')), int(input('Введите окончание интересующего участка ряда Фибоначчи:\n')))

print('--- Задача 1 - уровень normal - конец ---')
input('Посмотрите результат и нажмите Enter')
'''
# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()

def sort_to_max(origin_list):
    '''
    функция сортирует элементы списка по возрастанию
    '''
    current_list = []       # создаем промежуточный список
    # запускаем количество итераций по проходу количества элементов списка
    print('Исходный список:\n', origin_list)
    for i in range(len(origin_list)):
        minElement = origin_list[0]                 # утверждаем, что первый элемент списка является минимальным
        # перебираем все оставшиеся элементы списка и сравниваем с минимальным
        for element in origin_list:
            if minElement >= element:   # если находим элемент меньше либо равный минимальному, то забираем его значение и запоминаем его индекс
                minElement = element
                index = origin_list.index(element)
        origin_list.pop(index)          # после прохождения цикла по всем элементам мы точно знаем индекс и значение самого минимального, поэтому удаляем его из списка, а его значение передаём в новый список
        current_list.append(minElement)
    return print('Отсортированный список\n', current_list)          #печатаем получившийся промежуточный список

print('--- Задача 2 - уровень normal - конец ---')

sort_to_max([2, 10, -12, 2.5, 20, -11, 4, 4, 0])

print('--- Задача 2 - уровень normal - конец ---')
input('Посмотрите результат и нажмите Enter')

# Задача-3:
# Напишите собственную реализацию стандартной функции filter.
# Разумеется, внутри нельзя использовать саму функцию filter.

print('--- Задача 3 - уровень normal - начало ---')

def myFilter(fun, list):
    '''
    принцип действия функции схож с filter, только она при этом не отдельные элементы возвращает, а сразу отфильтрованный список
    '''
    currentList = []
    # перебираем все элементы полученного списка
    for elementList in list:
        # если полученная в качестве параметра функция от элемента возвращает True, то он попадает в отфильтрованный список
        if fun(elementList):
            currentList.append(elementList)
    # возвращаем отфильтрованный список
    return currentList

print(myFilter(len, ['', 'sdf', '234']))            # вернёт только два последних элемента
print(myFilter(lambda x: x-10 > 0, [1, 10, 20]))    # вернёт только 20

print('--- Задача 3 - уровень normal - конец ---')
input('Посмотрите результат и нажмите Enter')

# Задача-4:
# Даны четыре точки А1(х1, у1), А2(x2 ,у2), А3(x3 , у3), А4(х4, у4).
# Определить, будут ли они вершинами параллелограмма.

print('--- Задача 4 - уровень normal - начало ---')

import math

def parallel(list1, list2, list3, list4):
    '''
    Функция проверяет условия равенства противоположных сторон и равенства деления диагоналей пополам
    '''
    condition1 = condition2 = False         # задаём изначально False в оба условия
    # находим длины сторон
    list1_list2 = math.sqrt((max(list1[0], list2[0]) - min(list1[0], list2[0])) ** 2 + (
                max(list1[1], list2[1]) - min(list1[1], list2[1])) ** 2)
    list2_list3 = math.sqrt((max(list2[0], list3[0]) - min(list2[0], list3[0])) ** 2 + (
                max(list2[1], list3[1]) - min(list2[1], list3[1])) ** 2)
    list3_list4 = math.sqrt((max(list3[0], list4[0]) - min(list3[0], list4[0])) ** 2 + (
            max(list3[1], list4[1]) - min(list3[1], list4[1])) ** 2)
    list1_list4 = math.sqrt((max(list1[0], list4[0]) - min(list1[0], list4[0])) ** 2 + (
            max(list1[1], list4[1]) - min(list1[1], list4[1])) ** 2)
    # проверяем равенство противоположных сторон
    if list1_list2 == list3_list4 and list2_list3 == list1_list4:
        condition1 = True
    # Находим координаты середину одной и второй диагонали
    diagonal_1 = ((list1[0] + list3[0]) / 2, (list1[1] + list3[1]) / 2)
    diagonal_2 = ((list2[0] + list4[0]) / 2, (list2[1] + list4[1]) / 2)
    # сравниваем координаты середин диагоналей между собой
    if diagonal_1 == diagonal_2:
        condition2 = True
    # если оба ранее проверенных условий соблюдаются, то это параллелограмм, либо соответственно нет
    if condition1 and condition2:
        print('Указанные коордианты:\n{}, {}, {}, {}\nявляются вершинами параллелограмма.' .format(A1, A2, A3, A4))
    else:
        print('Как не крути, но эти вершины:\n{}, {}, {}, {}\nне являются параллелограммом.' .format(A1, A2, A3, A4))

# это квадрат, т.е. соответственно параллелограмм
A1 = [0, 0]
A2 = [1, 0]
A3 = [1, 1]
A4 = [0, 1]
'''
# это не параллелограмм, для проверки можете закоментировать верхние координаты и использовать эти
A1 = (0, 0)
A2 = (3, 4)
A3 = (7, 4)
A4 = (4, 3)
'''

parallel(A1, A2, A3, A4)

print('--- Задача 4 - уровень normal - конец ---')
input('Посмотрите результат и нажмите Enter')